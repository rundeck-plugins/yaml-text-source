plugins {
    id 'java'
    id 'pl.allegro.tech.build.axion-release' version '1.18.11'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

// Plugin metadata
ext.pluginName = 'YAML Test Source'
ext.pluginDescription = "Define a set of static Nodes"
ext.sopsCopyright = "Â© 2017, Rundeck, Inc."
ext.sopsUrl = "http://rundeck.com"
ext.buildDateString = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")
ext.archivesBaseName = "yaml-text-source"
ext.pluginBaseFolder = "."

// No Java dependencies needed - this is a script-based plugin

scmVersion {
    ignoreUncommittedChanges = true
    tag {
        prefix = ''
        versionSeparator = ''
    }
}

project.version = scmVersion.version
ext.archiveFilename = ext.archivesBaseName + '-' + version

// Plugin ZIP task (modernized from the external script)
tasks.register('pluginZip', Jar) {
    archiveBaseName = project.ext.archivesBaseName
    archiveVersion = project.version
    archiveClassifier = ''
    archiveExtension = 'zip'
    destinationDirectory = file("build/libs")

    from("${project.buildDir}/zip-contents") {
        include("*.yaml")
        include("resources/**")
        include("contents/*")
        into(archiveFilename)
    }

    manifest {
        attributes(
            'Rundeck-Plugin-Name': pluginName.toString(),
            'Rundeck-Plugin-Description': pluginDescription.toString(),
            'Rundeck-Plugin-Archive': 'true',
            'Rundeck-Plugin-File-Version': version,
            'Rundeck-Plugin-Author': sopsCopyright,
            'Rundeck-Plugin-URL': sopsUrl,
            'Rundeck-Plugin-Date': buildDateString
        )
    }

    doFirst {
        def assetsMap = new Properties()
        def tokens = assetsMap + [
            version    : version,
            date       : new Date().format("yyyy-MM-dd'T'HH:mm:ssX").toString(),
            author     : sopsCopyright,
            url        : sopsUrl,
            title      : pluginName,
            description: pluginDescription,
            name       : archivesBaseName.toString(),
        ]

        copy {
            from("${project.projectDir}/resources") {
                include '**/*'
                into "resources"
            }
            from("${project.projectDir}/contents") {
                into "contents"
            }
            from("${project.projectDir}/plugin.yaml") {
                filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: tokens)
                exclude '**/*.png'
            }
            into "${project.buildDir}/zip-contents"
        }
    }
}

publishing {
    publications {
        mavenZip(MavenPublication) {
            artifact pluginZip
        }
    }
}

build {
    dependsOn 'pluginZip'
}

tasks.register('install') {
    dependsOn 'build', 'publishToMavenLocal'
}

defaultTasks 'clean', 'build', 'pluginZip'